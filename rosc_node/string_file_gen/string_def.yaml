#This file is used to generate the msg_strings.h and msg_strings.c
#The generation is down by the strHCgen.py python script.
#The first entry is also considered as example:

rpc_xml_tag_strings: # <- This is the variable name for the 
                     # created string variable 
                     # and the defines for the enum
                     # DO ONLY USE C CONFORM WRITINGS FOR VARIABLES!!!
  comment: #Comment what strings the array contains here 
           #Resulting comment starts with: This array contains the strings for .... 
    'standard XMLRPC tags'
  defineShort: #This specifies the short definition infront of the enum values
    'TAG'
  stringlist: {   #Strings inside the variable 
                  #If the string contains special chars like ?, write it in ''
                  #If the string can't be used as enum declaration in C, you 
                  #can specifiy a replacement for it after a : like 
                  #shown in the next variable definition                  
                  'xml':XMLDEF,
                  '--':COMMENT,
                  'CDATA',
                  boolean,
                  data,
                  fault,
                  int,
                  member,
                  methodCall,
                  methodName,
                  methodResponse,
                  param,
                  params,
                  string,
                  struct,
                  value,
                  array,
                  i4,
              }


#Known Attributes strings XML
rpc_xml_attribute_strings:
  comment: 
    'standard attributes for XMLRPC'
  defineShort:
    'ATTRIBUTE'
  stringlist: {
    version
  }

#Standard strings for XMLRPC
#TODO maybe move strings of master API to another array, requires generator update
rpc_xml_stdtext:
  comment:
    'standard XMLRPC text pieces'
  defineShort:
    'STDTXT'
  stringlist: {
      '<?xml version=\"1.0\"?>': XML_DEF,
      Error code, 
      '/tcp_keepalive': TCP_KEEPALIVE,
      'http://': HTTP_URL_HEAD,
      TCPROS,
      'rosrpc://': ROSRPC_URL_HEAD,
      registerPublisher,
      registerSubscriber,
      unregisterPublisher,
      unregisterSubscriber,
      registerService,
      unregisterService,
      hasParam,
      requestTopic,
  }

#Method names for RPC
rpc_xml_slave_methodnames:
  comment:
    'Strings for known methods of the slave api'
  defineShort:
    'METHOD_NAME'
  stringlist: {
      getBusStats,
      getBusInfo,
      getMasterUri,
      shutdown,
      getPid,
      getSubscriptions,
      getPublications,
      paramUpdate,
      publisherUpdate,
      requestTopic,
  }

#Standard descriptors for headers
http_header_descriptors:
  comment:
    'standard http header descriptors'
  defineShort:
    'DESC'
  stringlist: {
        Server,
        User-Agent: USER_AGENT,
        Date,
        Host,
        Content-Type: CONTENT_TYPE,
        Content-length: CONTENT_LENGTH,
        Accepted-Encoding
  }
  
#Standard Strings for header generator
http_header_stdtext:
  comment:
    'some standard values for http headers'
  defineShort:
    'VAL'
  stringlist: {
    'POST / HTTP/1.1':METHOD_POST,
    'HTTP/1.0':HTTP1_0,
    'HTTP/1.1':HTTP1_1,
    'XMLRPC ROSc-NodeLib',
    'BaseHTTP/ROSc-NodeLib',
    'text/xml',
    'http://':HTTP_URL_HEAD,
    'OK'
  }

#Expectable content types (not only supported)
http_header_content_types:
  comment:
    'contains known content types'
  defineShort:
    'CONTENT'
  stringlist: {
    'gzip',
    'text/html'
  }


#Method strings
http_methods:
  comment:
    'method strings'
  defineShort:
    'METHOD'
  stringlist: {
    'POST',
    'GET',
  }


#Available actions
http_available_actions:
  comment:
    'contains available actions for http requests'
  defineShort:
    'ACTION'
  stringlist: {
    '':ROOT,
    'test'
  }

#Seperators for parsing
parse_separators:
  comment:
    'seperators for parsing different pieces of a XMLRPC message'
  defineShort:
    'SEP'
  stringlist: {
    '/. \n': METHOD,
    '\n:': HTTP_HEADER,
    '</>\n \"=': XML 
  }

 #xml rpc boolean
xml_rpc_boolean_strings:
  comment:
    'possible strings for representing boolean in xml rpc'
  defineShort:
    'BOOLEAN'
  stringlist: {
    '1': ONE,
    '0': ZERO,
    'true': 'TRUE',
    'false': 'FALSE',
  }
  
    